#-----------------------------------------------
# Uncomment exactly one of the lines labelled (A), (B), and (C) below
# to switch between compilation modes.

# (A) Production use (optimized mode)
OPT ?= -O2 -DNDEBUG
# (B) Debug mode, w/ full line-level debugging symbols
# OPT ?= -g2
# (C) Profiling mode: opt, but w/debugging symbols
# OPT ?= -O2 -g2 -DNDEBUG
#-----------------------------------------------

# detect what platform we're building on
$(shell CC="$(CC)" CXX="$(CXX)" TARGET_OS="$(TARGET_OS)" \
	./build_detect_platform build_config.mk ./)
# this file is generated by the previous line to set build flags and sources
include build_config.mk

#CC=/home/dragan/code/i2pd/012719/ColossusCoinXT/depends/x86_64-pc-linux-gnu/share/../native/bin/ccache gcc -m64
#CXX=/home/dragan/code/i2pd/012719/ColossusCoinXT/depends/x86_64-pc-linux-gnu/share/../native/bin/ccache g++ -m64 -std=c++11
#PLATFORM=OS_LINUX
#PLATFORM_LDFLAGS=-pthread
#PLATFORM_LIBS=
#PLATFORM_CCFLAGS=  -pthread -DOS_LINUX -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT
#PLATFORM_CXXFLAGS=-std=c++0x  -pthread -DOS_LINUX -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT
#PLATFORM_SHARED_CFLAGS=-fPIC
#PLATFORM_SHARED_EXT=so
#PLATFORM_SHARED_LDFLAGS=-shared -Wl,-soname -Wl,
#PLATFORM_SHARED_VERSIONED=true

LIB_SRC_DIR := apii2pd_client
# libi2pd_client
APII2PD_SRC_DIR := apii2pd
# libi2pd
APII2PD_CLIENT_SRC_DIR := $(LIB_SRC_DIR)

#LIB_SRC = $(wildcard $(LIB_SRC_DIR)/*.cpp)
#LIB_CLIENT_SRC = $(wildcard $(LIB_CLIENT_SRC_DIR)/*.cpp)
#LIB_SRC := $(wildcard $(LIB_SRC_DIR)/*.cpp)
#APII2PD_SRC := $(wildcard $(APII2PD_SRC_DIR)/*.cpp)
#APII2PD_CLIENT_SRC := $(LIB_SRC)

#include filelist.mk

SOURCES = $(wildcard $(LIB_SRC_DIR)/*.cpp)

#SOURCES = $(wildcard apii2pd_client/*.cpp)

#APII2PD_SOURCES = $(wildcard apii2pd/*.cpp)

APII2PD_CLIENT_SOURCES = $(SOURCES)

APII2PD_SOURCES = $(wildcard $(APII2PD_SRC_DIR)/*.cpp)

#$(APII2PD_SRC)

CFLAGS += -I. -I./include $(PLATFORM_CCFLAGS) $(OPT)
CXXFLAGS += -I. -I./include $(PLATFORM_CXXFLAGS) $(OPT)

LDFLAGS += $(PLATFORM_LDFLAGS)
LIBS += $(PLATFORM_LIBS)

#LIBOBJECTS = $(APII2PD_CLIENT_SOURCES:.cc=.o)
#APII2PD_OBJECTS = $(APII2PD_SOURCES:.cc=.o)
#APII2PD_CLIENT_OBJECTS = $(LIBOBJECTS)

LIBOBJECTS = $(patsubst %.cpp,obj/%.o,$(SOURCES))
APII2PD_LIBOBJECTS = $(patsubst %.cpp,obj/%.o,$(APII2PD_SOURCES))
APII2PD_CLIENT_LIBOBJECTS = $(LIBOBJECTS)

LIBRARY = libi2pdclient.a
APII2PD_LIBRARY = libi2pd.a
APII2PD_CLIENT_LIBRARY = $(LIBRARY)

# old makefile
SYS := $(shell $(CXX) -dumpmachine)
SHARED_LIBRARY := libi2pdclient.so
APII2PD_SHARED_LIBRARY := libi2pd.so
I2PD := i2pd
#GREP := grep

USE_AESNI	:= yes
USE_AVX		:= yes
USE_STATIC	:= no
USE_MESHNET	:= no
USE_UPNP	:= no
DEBUG		:= yes

ifeq ($(DEBUG),yes)
	CXX_DEBUG = -g
else
	CXX_DEBUG = -Os
	LD_DEBUG = -s
endif

ifeq ($(WEBSOCKETS),1)
	NEEDED_CXXFLAGS += -DWITH_EVENTS
endif

ifneq (, $(findstring darwin, $(SYS)))
	#DAEMON_SRC += $(DAEMON_SRC_DIR)/UnixDaemon.cpp
	ifeq ($(HOMEBREW),1)
		include Makefile.homebrew
	else
		include Makefile.osx
	endif
else ifneq (, $(findstring linux, $(SYS))$(findstring gnu, $(SYS)))
	#DAEMON_SRC += $(DAEMON_SRC_DIR)/UnixDaemon.cpp
	include Makefile.linux
else ifneq (, $(findstring freebsd, $(SYS))$(findstring openbsd, $(SYS)))
	#DAEMON_SRC += $(DAEMON_SRC_DIR)/UnixDaemon.cpp
	include Makefile.bsd
else ifneq (, $(findstring mingw, $(SYS))$(findstring cygwin, $(SYS)))
	#DAEMON_SRC += Win32/DaemonWin32.cpp Win32/Win32Service.cpp Win32/Win32App.cpp
	include Makefile.mingw
else # not supported
$(error Not supported platform)
endif

ifeq ($(USE_MESHNET),yes)
	NEEDED_CXXFLAGS += -DMESHNET
endif

NEEDED_CXXFLAGS += -I$(LIB_SRC_DIR) -I$(APII2PD_SRC_DIR)

# ...old makefile

default: all

#SHARED = libi2pdclient.$(PLATFORM_SHARED_EXT)
#$(SHARED):
#	$(CXX) $(LDFLAGS) $(PLATFORM_SHARED_LDFLAGS)$(SHARED2) $(CXXFLAGS) $(PLATFORM_SHARED_CFLAGS) $(SOURCES) -o $(SHARED) $(LIBS)

#all: mk_obj_dir $(ARLIB) $(ARLIB_CLIENT) #$(I2PD)
#all: $(SHARED) $(LIBRARY)
all: mk_obj_dir $(APII2PD_LIBRARY) $(LIBRARY) # $(APII2PD_SHARED_LIBRARY) $(SHARED_LIBRARY) 

$(I2PD): mk_obj_dir 

#clean:
#	-rm -f $(APII2PD_SHARED_LIBRARY) $(SHARED_LIBRARY) $(APII2PD_LIBRARY) $(LIBRARY) */*.o */*/*.o ios-x86/*/*.o ios-arm/*/*.o build_config.mk
#	-rm -rf ios-x86/* ios-arm/*
clean:
	$(RM) -r obj
	$(RM) -r docs/generated
	$(RM) $(APII2PD_SHARED_LIBRARY) $(SHARED_LIBRARY) $(APII2PD_LIBRARY) $(LIBRARY)

#strip: $(APII2PD_SHARED_LIBRARY) $(SHARED_LIBRARY)
#	strip $^

doxygen:
	doxygen -s docs/Doxyfile

$(SHARED_LIBRARY): $(LIBOBJECTS)
ifneq ($(USE_STATIC),yes)
	$(CXX) $(LDFLAGS) $(LDLIBS) -shared -o $@ $^
endif

$(APII2PD_SHARED_LIBRARY): $(APII2PD_LIBOBJECTS)
	$(CXX) $(LDFLAGS) $(LDLIBS) -shared -o $@ $^

$(LIBRARY): $(LIBOBJECTS)
	rm -f $@
	$(AR) -r $@ $^
#	$(AR) -rs $@ $(LIBOBJECTS)

$(APII2PD_LIBRARY) : $(APII2PD_LIBOBJECTS)
	rm -f $@
	$(AR) -r $@ $^
#	$(AR) -rs $@ $(APII2PD_LIBOBJECTS)

#$(APII2PD_LIBRARY): $(patsubst %.cpp,obj/%.o,$(APII2PD_SOURCES))
#	$(AR) -r $@ $^


obj/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(NEEDED_CXXFLAGS) $(OPT) $(INCFLAGS) $(CPU_FLAGS) -c -o $@ $<

mk_obj_dir: FORCE
	@mkdir -p obj
	#@mkdir -p obj/Win32
	@mkdir -p obj/$(APII2PD_SRC_DIR)
	@mkdir -p obj/$(LIB_SRC_DIR)
	#@mkdir -p obj/$(DAEMON_SRC_DIR)

FORCE: ;

#.PHONY: force

#.PHONY: mk_obj_dir
#.PHONY: test
#test:
#	$(foreach var,$(.VARIABLES),$(info $(var) = $($(var))))
